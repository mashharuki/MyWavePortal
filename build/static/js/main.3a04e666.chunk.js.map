{"version":3,"sources":["App.js","index.js"],"names":["contractABI","abi","contractAddress","App","useState","currentAccount","setCurrentAccount","messageValue","setMessageValue","allWaves","setAllWaves","waveBalance","setWaveBalance","console","log","checkIfWalletIsConnected","window","ethereum","request","method","accounts","length","account","getAllWaves","useEffect","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","getBalance","contractBalance","utils","formatEther","onNewWave","from","prevState","on","off","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","contractBalance_post","className","role","aria-label","onClick","name","placeholder","type","id","value","onChange","e","target","slice","reverse","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a04e666.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from \"./uitls/WavePortal.json\";\nimport './App.css';\n\nconst contractABI = abi.abi;\nconst contractAddress = \"0x7C7Bd8BC7cEBeb774FC2E94CA8e7f9c0a752e682\";\n\nfunction App() {\n  // ステート変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [messageValue, setMessageValue] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [waveBalance, setWaveBalance] = useState(0);\n  console.log(\"currentAccount: \", currentAccount);\n\n  // ウォレット接続チェック\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認します */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      // アカウント情報が見つかったかどうかチェック\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        // ステート変数に詰める。\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // 全てのWavesのデータを取得するメソッド\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(\n            contractAddress,\n            contractABI,\n            signer\n          );\n          // getAllWaves()を呼び出す。\n          const waves = await wavePortalContract.getAllWaves();\n          // 取得した結果を変換し詰める。  \n          const wavesCleaned = waves.map((wave) => {\n            return {\n              address: wave.waver,\n              timestamp: new Date(wave.timestamp * 1000),\n              message: wave.message,\n            };\n          });\n          setAllWaves(wavesCleaned);\n          // 現在の資産額を取得してセットする。\n          let contractBalance = await provider.getBalance(wavePortalContract.address);\n          setWaveBalance(ethers.utils.formatEther(contractBalance));\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // イベントがemitされたタイミングで画面を再描画する。\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n    /* NewWaveイベントがコントラクトから発信されたときに、情報を受け取ります */\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      // イベントリスナ開始\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    /*メモリリークを防ぐために、NewWaveのイベントを解除します*/\n    return() => {\n      if (wavePortalContract) {\n        // イベントリスナ終了\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  // connectWalletメソッドを実装\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      // ウォレット接続を求めるメソッドを実行する。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        // getTotalWavesメソッドを呼び出す\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        // コントラクトの残高を取得する。\n        let contractBalance = await provider.getBalance(wavePortalContract.address);\n        console.log(\"Contract balance:\", ethers.utils.formatEther(contractBalance));\n        // waveメソッドを呼び出して実行する。\n        const waveTxn = await wavePortalContract.wave(messageValue, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        let contractBalance_post = await provider.getBalance(wavePortalContract.address);\n        /* コントラクトの残高が減っていることを確認 */\n        if (contractBalance_post < contractBalance) {\n          /* 減っていたら下記を出力 */\n          console.log(\"User won ETH!\");\n        } else {\n          console.log(\"User didn't win ETH.\");\n        }\n        console.log(\"Contract balance after wave:\", ethers.utils.formatEther(contractBalance_post));\n        setWaveBalance(ethers.utils.formatEther(contractBalance_post));\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span> { \" \" }\n          WELCOME!\n        </div>\n        <div >\n          イーサリアムウォレットを接続して、メッセージを作成したら、\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span>\n          を送ってください\n          <span role=\"img\" aria-label=\"shine\">\n            ✨\n          </span>\n        </div>\n        <div className=\"balance\">\n          現在のコントラクトの資金： <b>{waveBalance} ETH</b>\n        </div>\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/* ウォレットコネクトのボタンを実装 */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Wallet Connected\n          </button>\n        )}\n        {currentAccount && (\n          <textarea\n            name=\"messageArea\"\n            placeholder=\"メッセージはこちら\"\n            type=\"text\"\n            id=\"message\"\n            value={messageValue}\n            onChange={(e) => setMessageValue(e.target.value)}\n          />\n        )}\n        {currentAccount &&\n          allWaves\n            .slice(0)\n            .reverse()\n            .map((wave, index) => {\n              return (\n                <div\n                  key={index}\n                  style={{\n                    backgroundColor: \"#F8F8FF\",\n                    marginTop: \"16px\",\n                    padding: \"8px\",\n                  }}\n                >\n                  <div>Address: {wave.address}</div>\n                  <div>Time: {wave.timestamp.toString()}</div>\n                  <div>Message: {wave.message}</div>\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}